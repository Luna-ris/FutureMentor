import logging
import os
from aiogram import Bot, Dispatcher
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart
from dotenv import load_dotenv
from handlers import setup_handlers  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é setup_handlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler('bot.log'), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("BOT_TOKEN is not set!")
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
def get_main_menu():
    buttons = [
        KeyboardButton(text="/create_goal"),
        KeyboardButton(text="/add_study_capsule"),
        KeyboardButton(text="/get_motivation"),
        KeyboardButton(text="/view_achievements"),
        KeyboardButton(text="/join_challenge"),
        KeyboardButton(text="/connect_habitica"),
        KeyboardButton(text="/set_mentor_style"),
        KeyboardButton(text="/leaderboard")
    ]
    keyboard_rows = [buttons[i:i+2] for i in range(0, len(buttons), 2)]
    keyboard = ReplyKeyboardMarkup(
        keyboard=keyboard_rows,
        resize_keyboard=True
    )
    return keyboard

@dp.message(CommandStart())
async def handle_start(message: Message):
    logger.info(f"Received /start from user {message.from_user.id}")
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø FutureMentor, —Ç–≤–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π –∏ –æ–±—É—á–µ–Ω–∏—è. "
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "üéØ /create_goal - –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å\n"
        "üìö /add_study_capsule - –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–±–Ω—É—é –∫–∞–ø—Å—É–ª—É\n"
        "üí° /get_motivation - –ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é\n"
        "üèÜ /view_achievements - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "üåç /join_challenge - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É\n"
        "üéÆ /connect_habitica - –ü–æ–¥–∫–ª—é—á–∏—Ç—å Habitica\n"
        "üßë‚Äçüè´ /set_mentor_style - –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –º–µ–Ω—Ç–æ—Ä–∞\n"
        "üèÖ /leaderboard - –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤",
        reply_markup=get_main_menu()
    )

@dp.message()
async def handle_unknown_message(message: Message):
    logger.info(f"Received message: {message.text} from user {message.from_user.id}")
    await message.reply(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:\n"
        "/create_goal, /add_study_capsule, /get_motivation, /view_achievements, "
        "/join_challenge, /connect_habitica, /set_mentor_style, /leaderboard",
        reply_markup=get_main_menu()
    )

async def on_startup(dispatcher: Dispatcher):
    webhook_url = f"https://{os.getenv('RAILWAY_PUBLIC_DOMAIN')}/webhook"
    await bot.set_webhook(webhook_url)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

async def on_shutdown(dispatcher: Dispatcher):
    await bot.delete_webhook()
    await bot.session.close()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def root_handler(request):
    return web.Response(text="–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ handlers.py, –ø–µ—Ä–µ–¥–∞–≤–∞—è bot –∏ storage
    logger.info("Registering handlers from handlers.py")
    setup_handlers(dp, bot, storage)
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    app = web.Application()
    request_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    request_handler.register(app, path="/webhook")
    setup_application(app, dp, bot=bot)

    port = int(os.getenv("PORT", 8000))
    web.run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()
